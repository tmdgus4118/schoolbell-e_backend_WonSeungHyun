1번 문제 풀이 과정입니다.

문제 개요
주어진 숫자 [1, 3, 5, 7, 9]에서 각 숫자를 한 번씩만 사용하여 두 개의 숫자를 만들고, 이들의 곱이 최대가 되도록 하는 조합을 찾는 문제입니다.

해결 접근 방식
 - 이 문제를 해결하기 위해 완전 탐색(Brute Force) + 백트래킹(Backtracking) + 가지치기(Branch and Bound) 기법을 적용하였습니다.

완전 탐색 (Brute Force)
  - 모든 가능한 두 개의 숫자 조합을 생성합니다.
  - (2자리, 3자리) 또는 (3자리, 2자리) 조합을 고려하여 가능한 모든 조합을 생성합니다.
  - 여기서 1자리 × 4자리의 케이스를 고려하지 않는 이유는 곱하는 두 수의 자리 수의 차이가 적을수록 결과값이 커지기 때문입니다. 따라서 1자리 숫자와 4자리 숫자의 차이는 3이므로 배제하였습니다.

백트래킹 (Backtracking)
  - 숫자를 선택할 때 이미 사용된 숫자가 있으면 해당 조합을 고려하지 않습니다.
  - Set을 사용하여 각 숫자가 한 번씩만 사용되도록 보장합니다.
  - 가지치기 (Branch and Bound)

현재 선택한 숫자의 곱이 이미 찾은 최댓값보다 작을 가능성이 높다면 탐색을 조기에 중단하여 불필요한 연산을 줄입니다.

결론

완전 탐색 + 백트래킹 + 가지치기(Branch and Bound)를 적용하여 최적의 값을 찾았습니다.

불필요한 탐색을 최소화하여 실행 속도를 최적화하였습니다.